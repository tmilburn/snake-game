<!DOCTYPE html>
<html>
<body>

<canvas id="snakeCanvas" width="384" height="260"></canvas>

<script>

var canvas = document.getElementById("snakeCanvas");
var ctx = canvas.getContext("2d");
ctx.scale(4, 4);

const bodyPattern = "    "
                   + "## #"
                   + "# ##"
                   + "    ";
                   
const emptyPattern = "    "
                   + "    "
                   + "    "
                   + "    ";
                   
const foodPattern = " #  "
                  + "# # "
                  + " #  "
                  + "    ";
                  
const headPattern = "#   "
                  + " ## "
                  + "### "
                  + "    ";
                  
const eatingPattern = "# # "
                    + " #  "
                    + "##  "
                    + "  # ";
                    
const cornerPattern = " ## "
                    + "# # "
                    + "##  "
                    + "    ";
const cornerPattern2 = "    "
                     + "##  "
                     + "# # "
                     + " ## ";
                    
const cornerEatenPattern = "### "
                         + "# # "
                         + "##  "
                         + "    ";
const cornerEatenPattern2 = "    "
                          + "##  "
                          + "# # "
                          + "### ";
                  
const eatenPattern = " ## "
                   + "## #"
                   + "# ##"
                   + " ## ";

const tailPattern = "    "
                  + "  ##"
                  + "####"
                  + "    ";
                  
const digits = [
  "###"
+ "# #"
+ "# #"
+ "# #"
+ "###",

  " # "
+ "## "
+ " # "
+ " # "
+ " # ",

  "###"
+ "  #"
+ "###"
+ "#  "
+ "###",

  "###"
+ "  #"
+ "###"
+ "  #"
+ "###",

  "# #"
+ "# #"
+ "###"
+ "  #"
+ "  #",

  "###"
+ "#  "
+ "###"
+ "  #"
+ "###",

  "###"
+ "#  "
+ "###"
+ "# #"
+ "###",

  "###"
+ "  #"
+ " # "
+ " # "
+ " # ",

  "###"
+ "# #"
+ "###"
+ "# #"
+ "###",

  "###"
+ "# #"
+ "###"
+ "  #"
+ "###"
];

const bigGameOver = " ########   ########   ##### #####   ########    ########  ###    ###  ######## ######### "
                  + "########## ########## ############# #########   ########## ###    ### ######### ##########"
                  + "###    ### ###    ### ############# ###         ###    ### ###    ### ###       ###    ###"
                  + "###        ###    ### ###  ###  ### ###         ###    ### ###    ### ###       ###    ###"
                  + "###  ##### ########## ###  ###  ### ########    ###    ### ###    ### ########  ######### "
                  + "###  ##### ########## ###  ###  ### ########    ###    ### ###   #### ########  ######### "
                  + "###    ### ###    ### ###  ###  ### ###         ###    ### #### ####  ###       ###    ###"
                  + "###    ### ###    ### ###  ###  ### ###         ###    ###  #######   ###       ###    ###"
                  + "########## ###    ### ###  ###  ### #########   ##########   #####    ######### ###    ###"
                  + " ########  ###    ### ###  ###  ###  ########    ########     ###      ######## ###    ###"

function drawScore(score)
{
     // Clear the score
    ctx.fillStyle = "#fff";
    ctx.fillRect(0, 0, 16, 5);
    
    //Print each digit
    ctx.fillStyle = "#222";
    for(var i = 0; i < 4; i++)
    {
    	var digit = Math.floor(score/Math.pow(10,3-i));
    	score = score - (digit * Math.pow(10,3-i));
        var pattern = digits[digit];
        for (var j = 0; j < pattern.length; j++)
        {
            var c = pattern.charAt(j);
            if(c == "#")
            {
                ctx.fillRect(1 + (i*4) + (j%3), Math.floor(j/3), 1, 1);
            }
        }
    }
}            
             
function drawGrid(pattern, x, y, direction)
{
    // Clear the square
    ctx.fillStyle = "#fff";
    ctx.fillRect(2 + (x*4), 11 + (y*4), 4, 4);
    
    // Print the pattern
    ctx.fillStyle = "#222";
    for (var i = 0; i < pattern.length; i++)
    {
        var c = pattern.charAt(i);
        if(c == "#")
        {
            switch(direction){
            case 0:
                ctx.fillRect(2 + (x*4) + (i%4), 11 + (y*4) + Math.floor(i/4), 1, 1);
                break;
            case 1:
                ctx.fillRect(2 + (x*4) + Math.floor(i/4), 11 + (y*4) + (i%4), 1, 1);
                break;
            case 2:
                ctx.fillRect(2 + (x*4) + (3 - (i%4)), 11 + (y*4) + Math.floor(i/4), 1, 1);
                break;
            case 3:
                ctx.fillRect(2 + (x*4) + Math.floor(i/4), 11 + (y*4) + (3 - (i%4)), 1, 1);
                break;
            }
        }
    }
}

var lastPressedKey = "";
var waitingToStart = false;

document.addEventListener('keydown', function(event) {
    var code = event.keyCode;
    switch(code) {
    case 37:
        lastPressedKey = 'LEFT';
        break;
    case 38:
        lastPressedKey = 'UP';
        break;
    case 39:
        lastPressedKey = 'RIGHT';
        break;
    case 40:
        lastPressedKey = 'DOWN';
        break;
    }
    if(waitingToStart)
    {
        resetGame();
    }
});

var direction;
var tailIndex;
var headIndex;
var snakeX;
var snakeY;
var snakeDir;
var bitmap;
var emptyCells;
var flashes;

function getBitmap(x, y)
{
    return bitmap[(y * 23) + x];
}
function setBitmap(variable, x, y)
{
    bitmap[(y * 23) + x] = variable;
}

var foodX;
var foodY;
var ateFood;

function setFood()
{
    var searchNum = Math.floor(Math.random() * emptyCells);
    var i = 0;
    while(searchNum--)
    {
        i++;
        while(bitmap[i] == 1)
        {
            i++;
        }
    }
    foodX = i % 23;
    foodY = Math.floor(i / 23);
    drawGrid(foodPattern, foodX, foodY, 0);
    setBitmap(1, foodX, foodY, 0);
    emptyCells--;
}

var score;
resetGame();
function resetGame()
{
    ctx.fillStyle = "#222";
    ctx.fillRect(0, 9, 96, 56);
    ctx.fillRect(0, 6, 96, 1);

    ctx.fillStyle = "#fff";
    ctx.fillRect(1, 10, 94, 54);

    direction = "RIGHT";

    tailIndex = 0;
    headIndex = 5;

    snakeX = new Uint8Array(new ArrayBuffer(300));
    snakeY = new Uint8Array(new ArrayBuffer(300));
    snakeDir = new Uint8Array(new ArrayBuffer(300));

    flashes = 8;
    waitingToStart = false;

    bitmap = new Uint8Array(new ArrayBuffer(23*13));
    emptyCells = 23*13;
    lastPressedKey = "";
    snakeX[0] = 5
    snakeX[1] = 6
    snakeX[2] = 7
    snakeX[3] = 8
    snakeX[4] = 9
    snakeX[5] = 10

    snakeY[0] = 6
    snakeY[1] = 6
    snakeY[2] = 6
    snakeY[3] = 6
    snakeY[4] = 6
    snakeY[5] = 6
    drawTail(0, snakeX[tailIndex], snakeY[tailIndex]);
    emptyCells--;
    setBitmap(1, snakeX[tailIndex], snakeY[tailIndex]);
    for(var i = tailIndex+1; i < headIndex; i++)
    {
        drawBody(0, snakeX[i], snakeY[i], false, 0);
        emptyCells--;
        setBitmap(1, snakeX[i], snakeY[i]);
    }
    drawHead(0, snakeX[headIndex], snakeY[headIndex]);
    emptyCells--;
    setBitmap(1, snakeX[headIndex], snakeY[headIndex]);
    ateFood = false;
    setFood();
    score = 0;
    drawScore(0);
    mainLoop();
}
function mainLoop()
{
    var keepRunning = true;
    var newHeadIndex = (headIndex + 1) % 300;
    // Get any new direction
    if(lastPressedKey == 'DOWN' && direction != 'UP')
    {
        direction = 'DOWN';
    }
    else if(lastPressedKey == 'UP' && direction != 'DOWN')
    {
        direction = 'UP';
    }
    else if(lastPressedKey == 'RIGHT' && direction != 'LEFT')
    {
        direction = 'RIGHT';
    }
    else if(lastPressedKey == 'LEFT' && direction != 'RIGHT')
    {
        direction = 'LEFT';
    }
    lastPressedKey = "";
    
    if(direction == 'DOWN')
    {
        snakeY[newHeadIndex] = (snakeY[headIndex] + 1) % 13;
        snakeX[newHeadIndex] = snakeX[headIndex];
        snakeDir[newHeadIndex] = 1;
    }
    else if(direction == 'UP')
    {
        snakeY[newHeadIndex] = snakeY[headIndex] - 1;
        if(snakeY[newHeadIndex] == 255)
        {
            snakeY[newHeadIndex] += 13;
        }
        snakeX[newHeadIndex] = snakeX[headIndex];
        snakeDir[newHeadIndex] = 3;
    }
    else if(direction == 'RIGHT')
    {
        snakeX[newHeadIndex] = (snakeX[headIndex] + 1) % 23;
        snakeY[newHeadIndex] = snakeY[headIndex];
        snakeDir[newHeadIndex] = 0;
    }
    else if(direction == 'LEFT')
    {
        snakeX[newHeadIndex] = snakeX[headIndex] - 1;
        if(snakeX[newHeadIndex] == 255)
        {
            snakeX[newHeadIndex] += 23;
        }
        snakeY[newHeadIndex] = snakeY[headIndex];
        snakeDir[newHeadIndex] = 2;
    }
    
    setBitmap(0, snakeX[tailIndex], snakeY[tailIndex]);
    var oldTailIndex = tailIndex;
    var oldAteFood = ateFood;
    if(snakeX[newHeadIndex] == foodX && snakeY[newHeadIndex] == foodY)
    {
        drawGrid(emptyPattern, snakeX[oldTailIndex], snakeY[oldTailIndex]);
        setBitmap(1, snakeX[newHeadIndex], snakeY[newHeadIndex]);
        setFood();
        ateFood = true;
        score++;
		drawScore(score);
    }
    else if(getBitmap(snakeX[newHeadIndex], snakeY[newHeadIndex]) != 0)
    {
        endGame();
        keepRunning = false;
    }
    else
    {
        drawGrid(emptyPattern, snakeX[oldTailIndex], snakeY[oldTailIndex]);
        ateFood = false;
        setBitmap(1, snakeX[newHeadIndex], snakeY[newHeadIndex]);
        tailIndex = (tailIndex + 1) % 300;
    }
    if(keepRunning)
    {
        drawTail(snakeDir[tailIndex], snakeX[tailIndex], snakeY[tailIndex]);
        drawBody(snakeDir[headIndex], snakeX[headIndex], snakeY[headIndex], oldAteFood, snakeDir[newHeadIndex]);
        drawHead(snakeDir[newHeadIndex], snakeX[newHeadIndex], snakeY[newHeadIndex]);
        snakeDir[headIndex] = snakeDir[newHeadIndex];
        headIndex = newHeadIndex;
        setTimeout(mainLoop, 200);
    }
}
function endGame()
{
    flashes--;
    if(flashes % 2)
    {
        ctx.fillStyle = "#fff";
        ctx.fillRect(0, 0, 16, 5);
    }
    else
    {
        drawScore(score);
    }
    
    if(flashes > 0)
    {
        setTimeout(endGame, 500);
    }
    else
    {
        reduceScore();
    }
}

function reduceScore()
{
    score--;
    drawScore(score);
    if(score == 0)
    {
        gameOver();
    }
    else
    {
        setTimeout(reduceScore, 100);
    }
}

function gameOver()
{
    ctx.fillStyle = "#fff";
    ctx.fillRect(2, 31, 92, 12);
    
    //Print game over
    ctx.fillStyle = "#222";
    for (var i = 0; i < bigGameOver.length; i++)
    {
        var c = bigGameOver.charAt(i);
        if(c == "#")
        {
            ctx.fillRect(3 + i%90, 32 + Math.floor(i/90), 1, 1);
        }
    }
    waitingToStart = true;
}
function drawHead(direction, x, y)
{
	var eating = false;
	switch(direction){
    case 0:
    	if(foodX == x+1 && y == foodY)
        {
        	eating = true;
        }
    	break;
    case 1:
    	if(foodX == x && y+1 == foodY)
        {
        	eating = true;
        }
    	break;
    case 2:
    	if(foodX == x-1 && y == foodY)
        {
        	eating = true;
        }
    	break;
    case 3:
    	if(foodX == x && y-1 == foodY)
        {
        	eating = true;
        }
    	break;
    }
    if(eating)
    {
    	drawGrid(eatingPattern, x, y, direction);
    }
    else
    {
    	drawGrid(headPattern, x, y, direction);
    }
}
function drawBody(direction, x, y, ateFood, headDirection)
{
    if(ateFood)
    {
        if(direction == headDirection)
        {
            drawGrid(eatenPattern, x, y, direction);
        }
        else if(headDirection < 2)
        {
            drawGrid(cornerEatenPattern2, x, y, direction);
        }
        else
        {
            drawGrid(cornerEatenPattern, x, y, direction);
        }
    }
    else
    {
        if(direction == headDirection)
        {
            drawGrid(bodyPattern, x, y, direction);
        }
        else if(headDirection < 2)
        {
            drawGrid(cornerPattern2, x, y, direction);
        }
        else
        {
            drawGrid(cornerPattern, x, y, direction);
        }
    }
}
function drawTail(direction, x, y)
{
    drawGrid(tailPattern, x, y, direction);
}
</script>

</body>
</html>
